Index: configure
===================================================================
--- configure	(revision 23982)
+++ configure	(working copy)
@@ -60,6 +60,7 @@
 _build_lure=no
 _build_cine=no
 _build_agi=no
+_build_kom=no
 _need_memalign=no
 _build_plugins=no
 _nasm=auto
@@ -332,6 +333,7 @@
   --enable-lure            build the Lure of the Temptress engine
   --enable-cine            build the Cinematique engine evo 1
   --enable-agi             build the AGI engine
+  --enable-kom             build the Kingdom O' Magic engine
   --enable-plugins         build engines as loadable modules instead of
                            static linking them
   --disable-mt32emu        don't enable the integrated MT-32 emulator
@@ -400,6 +402,7 @@
       --enable-lure)            _build_lure=yes ;;
       --enable-cine)            _build_cine=yes ;;
       --enable-agi)             _build_agi=yes ;;
+      --enable-kom)             _build_kom=yes ;;
       --disable-hq-scalers)     _build_hq_scalers=no ;;
       --disable-scalers)        _build_scalers=no ;;
       --enable-alsa)            _alsa=yes       ;;
@@ -1251,10 +1254,12 @@
 if test "$_build_cine" = yes ; then
 	echo "    Cinematique evo 1"
 fi
-
 if test "$_build_agi" = yes ; then
 	echo "    AGI"
 fi
+if test "$_build_kom" = yes ; then
+	echo "    Kingdom O' Magic"
+fi
 
 echo
 
Index: engines/engines.mk
===================================================================
--- engines/engines.mk	(revision 23982)
+++ engines/engines.mk	(working copy)
@@ -79,3 +79,8 @@
 MODULES += engines/agi
 endif
 
+ifdef DISABLE_KOM
+DEFINES += -DDISABLE_KOM
+else 
+MODULES += engines/kom
+endif
Index: common/file.cpp
===================================================================
--- common/file.cpp	(revision 23982)
+++ common/file.cpp	(working copy)
@@ -20,6 +20,8 @@
  *
  */
 
+#include <stdarg.h>
+
 #include "common/file.h"
 #include "common/fs.h"
 #include "common/hashmap.h"
@@ -446,4 +448,20 @@
 	return len;
 }
 
+int CDECL File::scanf(const char *format, ...) {
+	va_list arg;
+	int done;
+
+	if (_handle == NULL) {
+		error("File::scanf: File is not open!");
+		return 0;
+	}
+
+	va_start(arg, format);
+	done = vfscanf(_handle, format, arg);
+	va_end(arg);
+
+	return done;
+}
+
 }	// End of namespace Common
Index: common/scummsys.h
===================================================================
--- common/scummsys.h	(revision 23982)
+++ common/scummsys.h	(working copy)
@@ -342,8 +342,10 @@
 #if defined(__GNUC__)
 	#define NORETURN __attribute__((__noreturn__)) 
 	#define GCC_PRINTF(x,y) __attribute__((format(printf, x, y)))
+	#define GCC_SCANF(x,y) __attribute__((format(scanf, x, y)))
 #else
 	#define GCC_PRINTF(x,y)
+	#define GCC_SCANF(x,y)
 #endif
 
 
Index: common/fs.h
===================================================================
--- common/fs.h	(revision 23982)
+++ common/fs.h	(working copy)
@@ -82,7 +82,7 @@
 
 	/**
 	 * Create a new invalid FilesystemNode. In other words, isValid() for that
-	 * node returns false, and if you try to get it's path, an assert is
+	 * node returns false, and if you try to get its path, an assert is
 	 * triggered.
 	 */
 	FilesystemNode();
Index: common/file.h
===================================================================
--- common/file.h	(revision 23982)
+++ common/file.h	(working copy)
@@ -140,6 +140,8 @@
 	void seek(int32 offs, int whence = SEEK_SET);
 	uint32 read(void *dataPtr, uint32 dataSize);
 	uint32 write(const void *dataPtr, uint32 dataSize);
+
+	int CDECL scanf(const char *format, ...) GCC_SCANF(2, 3);
 };
 
 } // End of namespace Common
Index: base/plugins.cpp
===================================================================
--- base/plugins.cpp	(revision 23982)
+++ base/plugins.cpp	(working copy)
@@ -392,6 +392,9 @@
 	#ifndef DISABLE_AGI
 	LINK_PLUGIN(AGI)
 	#endif
+	#ifndef DISABLE_KOM
+	LINK_PLUGIN(KOM)
+	#endif
 
 #endif
 }
